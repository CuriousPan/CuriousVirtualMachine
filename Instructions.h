#ifndef INSTRUCTIONS_H
#define INSTRUCTIONS_H

typedef enum {
    PSH_I,            //PUSHES AN ELEMENT ON THE STACK. THE ELEMENT HAS TO BE PROVIDED AS THE FIRST OPERAND
    POP_I,            //POPS A NUMBER FROM THE STACK
    ADD_I,            //POPS TWO TOP NUMBERS FROM THE STACK, ADDS THEM AND PUSHES THE RESULT ON THE STACK
    SUB_I,            //POPS TWO TOP NUMBERS FROM THE STACK, SUBSTRACTS FIRST FROM THE SECOND AND PUSHES THE RESULT ON THE STACK
    PRT_LST_I,        //PRINT A TOP-STACK VALUE
    HLT_I,            //END THE PROGRAM BY SETTING THE RUNNING FLAG TO FALSE
    CMP_LT_I,         //POPS 2 TOP ELEMENTS FROM THE STACK, COMPARES THEM AND PUSHES 1 ON THE STACK IF LEFT NUMBER IS SMALLER THAN RIGHT NUMBER, OTHERWISE 0
    CMP_GT_I,         //POPS 2 TOP ELEMENTS FROM THE STACK, COMPARES THEM AND PUSHES 1 ON THE STACK IF LEFT NUMBER IS GREATER THAN RIGHT NUMBER, OTHERWISE 0
    CMP_LET_I,        //POPS 2 TOP ELEMENTS FROM THE STACK, COMPARES THEM AND PUSHES 1 ON THE STACK IF LEFT NUMBER IS SMALLER OR EQUALS THAN RIGHT NUMBER, OTHERWISE 0
    CMP_GET_I,        //POPS 2 TOP ELEMENTS FROM THE STACK, COMPARES THEM AND PUSHES 1 ON THE STACK IF LEFT NUMBER IS GREATER OR EQUALS THAN RIGHT NUMBER, OTHERWISE 0
    CMP_EQ_I,         //POPS 2 TOP ELEMENTS FROM THE STACK, COMPARES THEM AND PUSHES 1 ON THE STACK IF LEFT NUMBER IS EQUAL TO THE RIGHT NUMBER, OTHERWISE 0
    CMP_NEQ_I,        //POPS 2 TOP ELEMENTS FROM THE STACK, COMPARES THEM AND PUSHES 1 ON THE STACK IF LEFT NUMBER IS NOT EQUAL TO THE RIGHT NUMBER, OTHERWISE 0
    LD_VAL_I,         //LOADS A VALUE FROM A PROVIDED ADDRESS TO THE TOP OF THE STACK. ADDRESS HAS TO BE PROVIDED AS THE FIRST OPERAND
    STR_VAL_I,        //POPS A TOP ELEMENT FROM THE STACK AND LOADS TO THE PROVIDED ADDRESS ADDRESS HAS TO BE PROVIDED AS THE FIRST OPERAND
    JMP_BY_IF_ZERO_I, //JUMPS BY THE PROVIDED NUMBER OF INSTRUCTIONS, IF ZERO IS ON THE TOP OF THE STACK AND POPS THAT ZERO. NUMBER OF INSTRUCTIONS TO JUMP HAS TO BE PROVIDED AS THE FIRST OPERAND
    JMP_BY_IF_ONE_I,
    JMP_BY_I,         //JUMPS BY THE PROVIDED NUMBER OF INSTRUCTIONS. NUMBER OF INSTRUCTIONS TO JUMP HAS TO BE PROVIDED AS THE FIRST OPERAND
    DBG_PRT_I,        //PRINT A DEBUG MSG INSTR
    NUM_INSTRUCTIONS  //NUMBER OF POSSIBLE INSTRUCTIONS
} Opcode;

typedef struct {
    Opcode opcode;
    int o1;
    int o2;
    char *str; //this attribute is for printing an arbitrary string
} Instruction;

#endif /* INSTRUCTIONS_H */
